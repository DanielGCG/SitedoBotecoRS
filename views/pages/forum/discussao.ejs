<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/pages/forum/style/discussao.css">
</head>
    <p id="titulo-categoria-discussao" style="text-align: start; font-style: italic; margin-bottom: 1rem;"></p>
    <!-- Discussão -->
    <div class="postarea" id="postarea">
    </div>
    <!-- Area de envio de post -->
    <section class="send-messagearea">
        <div class="twitter-draft-container">
          <!-- Campo de texto -->
          <textarea class="tweet-input-grande" id="messageText" placeholder="escrever comentário..." maxlength="440"></textarea>
          <div id="char-count" class="char-count">
              <span id="char-count-text">0/440</span>
          </div>

          <!-- Preview de Mídia -->
          <div id="media-preview" class="media-preview">
          </div>

          <div class="twitter-draft-footer">
              <div class="twitter-draft-footer-midia">
                  <!-- Botão para fazer upload de midia -->
                  <div class="upload-container">
                      <label for="mediaFile" style="cursor: url('/img/cursor-mao.png'), auto;">
                          <svg
                              xmlns="http://www.w3.org/2000/svg" 
                              viewBox="0 0 24 24" 
                              fill="#1D9BF0"
                              width="24" 
                              height="24"
                              aria-hidden="false">
                              <path d="M3 5.5C3 4.119 4.119 3 5.5 3h13C19.881 3 21 4.119 21 5.5v13c0 1.381-1.119 2.5-2.5 2.5h-13C4.119 21 3 19.881 3 18.5v-13zM5.5 5c-.276 0-.5.224-.5.5v9.086l3-3 3 3 5-5 3 3V5.5c0-.276-.224-.5-.5-.5h-13zM19 15.414l-3-3-5 5-3-3-3 3V18.5c0 .276.224.5.5.5h13c.276 0 .5-.224.5-.5v-3.086zM9.75 7C8.784 7 8 7.784 8 8.75s.784 1.75 1.75 1.75 1.75-.784 1.75-1.75S10.716 7 9.75 7z"></path>
                          </svg>
                      </label>
                      <input type="file" id="mediaFile" accept="image/*,video/*" style="display: none;" onchange="previewMedia()" />
                  </div>

                  <!-- Botão para fazer upload de gif -->
                  <div class="upload-container">
                      <label for="selectGifButton" style="cursor: url('/img/cursor-mao.png'), auto;">
                          <svg
                              xmlns="http://www.w3.org/2000/svg" 
                              viewBox="0 0 24 24" 
                              fill="#1D9BF0"
                              width="24" 
                              height="24"
                              aria-hidden="false">
                              <path d="M3 5.5C3 4.119 4.12 3 5.5 3h13C19.88 3 21 4.119 21 5.5v13c0 1.381-1.12 2.5-2.5 2.5h-13C4.12 21 3 19.881 3 18.5v-13zM5.5 5c-.28 0-.5.224-.5.5v13c0 .276.22.5.5.5h13c.28 0 .5-.224.5-.5v-13c0-.276-.22-.5-.5-.5h-13zM18 10.711V9.25h-3.74v5.5h1.44v-1.719h1.7V11.57h-1.7v-.859H18zM11.79 9.25h1.44v5.5h-1.44v-5.5zm-3.07 1.375c.34 0 .77.172 1.02.43l1.03-.86c-.51-.601-1.28-.945-2.05-.945C7.19 9.25 6 10.453 6 12s1.19 2.75 2.72 2.75c.85 0 1.54-.344 2.05-.945v-2.149H8.38v1.032H9.4v.515c-.17.086-.42.172-.68.172-.76 0-1.36-.602-1.36-1.375 0-.688.6-1.375 1.36-1.375z"></path>
                          </svg>
                          <button id="selectGifButton" style="display: none;"></button>
                      </label>
                  </div>
              </div>
              <!-- Botão para enviar o tweet -->
              <button id="post" class="post-button">Publicar</button>
          </div>
      </div>
    </section>
<script>
async function removerPost(userId, publicacaoId, discussaoCommentId) {
  try {
    const response = await fetch(`/API/forum/removerdiscussaocomment`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId, publicacaoId, discussaoCommentId }),
    });

    const responseData = await response.json();

    if (response.ok) {
    } else {
      console.error(responseData.error || 'Erro ao remover a DiscussaoPost.');
    }
  } catch (error) {
    console.error(`Erro: ${error.message}`);
  }
}

function previewMedia() {
    const fileInput = document.getElementById('mediaFile');
    const previewContainer = document.getElementById('media-preview');

    // Limpa o preview anterior e adiciona o botão de limpar input
    previewContainer.innerHTML = '';
    previewContainer.innerHTML += `
    <div id="media-preview-closebtn" class="media-preview-closebtn">
        <label for="clearMidiaInput" style="cursor: url('/img/cursor-mao.png'), auto;">
            <?xml version="1.0" encoding="utf-8"?><!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
            <svg width="36px" height="36px" viewBox="0 0 24 24" fill="#1D9BF0" xmlns="http://www.w3.org/2000/svg">
                <circle opacity="0.5" cx="12" cy="12" r="8" stroke="#1C274C" stroke-width="1.5"/>
                <path d="M14.5 9.50002L9.5 14.5M9.49998 9.5L14.5 14.5" stroke="#1C274C" stroke-width="1.5" stroke-linecap="round"/>
            </svg>
        </label>
        <button id="clearMidiaInput" style="display: none;" onclick="event.preventDefault(), clearMidiaInput()"></button>
    </div>
    `

    if (fileInput.files && fileInput.files[0]) {
        const file = fileInput.files[0];
        const fileType = file.type;

        // Verifica o tipo do arquivo
        if (fileType.startsWith('image/')) {
            const img = document.createElement('img');
            img.src = URL.createObjectURL(file);
            previewContainer.appendChild(img);
        } else if (fileType.startsWith('video/')) {
            const video = document.createElement('video');
            video.src = URL.createObjectURL(file);
            video.controls = true;
            previewContainer.appendChild(video);
        } else {
            previewContainer.textContent = 'Formato de arquivo não suportado.';
        }
    }
}

// Contador de caracteres do post
document.getElementById("messageText").addEventListener("input", function() {
    var maxLength = 440; // Limite de caracteres
    var currentLength = this.value.length;

    // Atualiza o contador para mostrar "x/440"
    document.getElementById("char-count-text").textContent = `${currentLength}/${maxLength}`;

    // Se o limite for alcançado, desabilitar mais entradas
    if (currentLength >= maxLength) {
        this.value = this.value.substring(0, maxLength); // Impede mais caracteres
    }
});

function clearMidiaInput() {
  document.getElementById('mediaFile').value = '';

  if (document.getElementById('media-preview-closebtn') !== null){
      const mediaPreviewCloseBtn = document.getElementById('media-preview-closebtn');
      mediaPreviewCloseBtn.innerHTML = '';
      document.getElementById('clearMidiaInput').style.display = "none";
  }

  // Limpa o preview anterior
  const previewContainer = document.getElementById('media-preview');
  previewContainer.innerHTML = '';
}

async function editComment(commentElement, discussaoCommentId) {
  // Verifica se o campo de edição já existe
  if (commentElement.querySelector('.edit-textarea')) {
    return;
  }

  const originalText = commentElement.querySelector('.post-text').innerText;
  commentElement.innerHTML += `
    <textarea class="tweet-input-pequeno edit-textarea" id="editText" placeholder="escrever comentário..." maxlength="440">${originalText}</textarea>
    <div id="char-count" class="char-count">
        <span id="char-count-text">0/440</span>
    </div>
    <button id="saveEdit" class="post-button">Editar</button>
    <button id="cancelEdit" class="post-button">Cancelar</button>
  `;

  document.getElementById('saveEdit').addEventListener('click', async () => {
    const text = document.getElementById('editText').value.trim();
    const userId = localStorage.getItem("autenticationUserId");

    if (!userId || !text) {
      document.getElementById('statusMessage').textContent = 'O comentário não pode estar vazio.';
      return;
    }

    try {
      const response = await fetch(`/API/forum/discussaoeditcomment`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, discussaoCommentId, publicacaoId, text, media: null }),
      });

      const responseData = await response.json();
      if (response.ok) {
        commentElement.querySelector('.post-text').innerText = text;
        document.getElementById('editText').remove();
        document.getElementById('saveEdit').remove();
        document.getElementById('cancelEdit').remove();
        document.getElementById('char-count').remove();
      } else {
        console.log(responseData.error || 'Erro ao editar o comentário.');
      }
    } catch (error) {
      console.log(`Erro: ${error.message}`);
    }
  });

  document.getElementById('cancelEdit').addEventListener('click', () => {
    document.getElementById('editText').remove();
    document.getElementById('saveEdit').remove();
    document.getElementById('cancelEdit').remove();
    document.getElementById('char-count').remove();
  });
}

function renderComments(comments) {
  const messagesDiv = document.getElementById('postarea');
  messagesDiv.innerHTML = ''; // Limpa os posts existentes

  if (comments.length === 0) {
    messagesDiv.innerHTML = '<div class="post">Nenhum comentário ainda.</div>';
    return;
  }

  comments.forEach(comment => {
    const postDiv = document.createElement('div');
    postDiv.classList.add('post');
    
    const time = new Date(comment.time);
    const now = new Date();
    const isToday = now.toDateString() === time.toDateString();
    const isYesterday = new Date(now.setDate(now.getDate() - 1)).toDateString() === time.toDateString();
    const daysOfWeek = ['domingo', 'segunda', 'terça', 'quarta', 'quinta', 'sexta', 'sábado'];
    let tempoFormatado;

    if (isToday) {
      tempoFormatado = time.toLocaleTimeString();
    } else if (isYesterday) {
      tempoFormatado = `ontem ${time.toLocaleTimeString()}`;
    } else if (now - time < 7 * 24 * 60 * 60 * 1000) {
      tempoFormatado = `${daysOfWeek[time.getDay()]} ${time.toLocaleTimeString()}`;
    } else {
      tempoFormatado = `${time.toLocaleDateString()} ${time.toLocaleTimeString()}`;
    }
    
    if (comment.userId === localStorage.getItem("autenticationUserId")){
      if(comment.edited) {
        postDiv.innerHTML = `
        <div class="post-header">
          <button class="edit-button" onclick="editComment(this.closest('.post'), '${comment.discussaoCommentId}')">📝</button>
          <button class="remove-button" onclick="removerPost('${comment.userId}', '${comment.publicacaoId}', '${comment.discussaoCommentId}')">🗑️</button>
        </div>
        <div class="post-text">${comment.text}</div>
        ${comment.media ? `<div class="post-media"><img src="${comment.media}" alt="Mídia"></div>` : ''}
        <div class="post-info">
          <p><a style="text-decoration: none; color: #777;" href="/forum/user?userTag=${comment.userTag}"><strong>${comment.userTag}</strong></a></p>
          <p>${tempoFormatado} - editado</p>
        </div>
      `;
      }
      else{
        postDiv.innerHTML = `
          <div class="post-header">
            <button class="edit-button" onclick="editComment(this.closest('.post'), '${comment.discussaoCommentId}')">📝</button>
            <button class="remove-button" onclick="removerPost('${comment.userId}', '${comment.publicacaoId}', '${comment.discussaoCommentId}')">🗑️</button>
          </div>
          <div class="post-text">${comment.text}</div>
          ${comment.media ? `<div class="post-media"><img src="${comment.media}" alt="Mídia"></div>` : ''}
          <div class="post-info">
            <p><a style="text-decoration: none; color: #777;" href="/forum/user?userTag=${comment.userTag}"><strong>${comment.userTag}</strong></a></p>
            <p>${tempoFormatado}</p>
          </div>
        `;
      }
    }
    else{
      if(comment.edited) {
        postDiv.innerHTML = `
          <div class="post-text">${comment.text}</div>
          ${comment.media ? `<div class="post-media"><img src="${comment.media}" alt="Mídia"></div>` : ''}
          <div class="post-info">
                    <p><a style="text-decoration: none; color: #777;" href="/forum/user?userTag=${comment.userTag}"><strong>${comment.userTag}</strong></a></p>
            <p>${tempoFormatado} - editado</p>
          </div>
        `;
      }
      else{
        postDiv.innerHTML = `
          <div class="post-text">${comment.text}</div>
          ${comment.media ? `<div class="post-media"><img src="${comment.media}" alt="Mídia"></div>` : ''}
          <div class="post-info">
                    <p><a style="text-decoration: none; color: #777;" href="/forum/user?userTag=${comment.userTag}"><strong>${comment.userTag}</strong></a></p>
            <p>${tempoFormatado}</p>
          </div>
        `;
      }
    }

    messagesDiv.appendChild(postDiv);
  });

  // Fazer a rolagem ir para o final
  messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

// Conectar ao servidor de mensagens
function listenForComments(publicacaoId) {
    if (!publicacaoId) {
        console.error('publicacaoId é necessário para escutar comentários.');
        return;
    }

    // Conectar ao servidor de mensagens com parâmetros na URL
    const eventSource = new EventSource(`/API/forum/stream-discussoesComments?publicacaoId=${publicacaoId}`);
    
    eventSource.onmessage = (event) => {
        try {
        const posts = JSON.parse(event.data);
        renderComments(posts); // Renderizar as mensagens no frontend
        } catch (error) {
        console.error('Erro ao processar os dados recebidos:', error);
        }
    };

    eventSource.onerror = (error) => {
        eventSource.close();
    };
}

// Postar novo post
document.getElementById('post').addEventListener('click', async () => {
  const text = document.getElementById('messageText').value.trim();
  const userId = localStorage.getItem("autenticationUserId");
  const media = document.getElementById('mediaFile').files[0] ? URL.createObjectURL(document.getElementById('mediaFile').files[0]) : null;

  if (!userId || (!text && !media)) {
    document.getElementById('statusMessage').textContent = 'O post não pode estar vazio.';
    return;
  }

  try {
    const response = await fetch(`/API/forum/discussaocomment`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, publicacaoId, text, media }),
    });

    const responseData = await response.json();
    if (response.ok) {
    document.getElementById('messageText').value = ''; // Limpar o campo de entrada
    document.getElementById('mediaFile').value = ''; // Limpar o campo de mídia
    document.getElementById('media-preview').innerHTML = ''; // Limpar o preview de mídia

    // Fazer a rolagem ir para o final
    const messagesDiv = document.getElementById('postarea');
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
    } else {
    console.log(responseData.error || 'Erro ao publicar.');
    }
  } catch (error) {
    console.log(`Erro: ${error.message}`);
  }
});

let publicacaoId;

window.onload = async () => {
  document.getElementById('messageText').value = ''; // Limpar o campo de entrada

  // Recuperando os parâmetros da URL
  const urlParams = new URLSearchParams(window.location.search);

  // Atribuindo os valores recuperados nas variáveis globais
  publicacaoId = urlParams.get('publicacaoId');

  let response;
  try{
    response = await fetch(`/API/forum/getpublicacao?publicacaoId=${publicacaoId}`, {
    method: 'GET',
    headers: { 'Content-Type': 'application/json' }
    });

    if (!response.ok) {
    throw new Error('Erro ao buscar a publicação.');
    }

    response = await response.json();

  }catch(error){
    console.error(`Erro: ${error.message}`);
    return;
  }

  // Adiciona titulo à página
  document.getElementById("titulo-categoria-discussao").innerHTML = `
  <div style="display: flex; align-items: center; margin-bottom: 1rem;">
    <button id="back-button" onclick="event.stopPropagation(); window.history.back();" 
      style="background: none; border: none; cursor: pointer;">
      <svg fill="#000000" height="16px" width="16px" viewBox="0 0 26.676 26.676" style="margin-right: 5px;">
        <path d="M26.105,21.891c-0.229,0-0.439-0.131-0.529-0.346l0,0c-0.066-0.156-1.716-3.857-7.885-4.59
        c-1.285-0.156-2.824-0.236-4.693-0.25v4.613c0,0.213-0.115,0.406-0.304,0.508c-0.188,0.098-0.413,0.084-0.588-0.033L0.254,13.815
        C0.094,13.708,0,13.528,0,13.339c0-0.191,0.094-0.365,0.254-0.477l11.857-7.979c0.175-0.121,0.398-0.129,0.588-0.029
        c0.19,0.102,0.303,0.295,0.303,0.502v4.293c2.578,0.336,13.674,2.33,13.674,11.674c0,0.271-0.191,0.508-0.459,0.562
        C26.18,21.891,26.141,21.891,26.105,21.891z"/>
      </svg>
    </button>        
    <strong style="font-size: 18px;">
      <a href="/discussoes?categoriaId=${encodeURIComponent(response.publicacao.categoriaId)}" 
        style="color: inherit; text-decoration: underline; text-decoration-color: currentColor;">
        ${response.publicacao.categoriaId}
      </a> / ${response.publicacao.discussaoTitle}
    </strong>
  </div>
`;

  // Chama a função listenForPosts com os parâmetros
  listenForComments(publicacaoId);
};
</script>